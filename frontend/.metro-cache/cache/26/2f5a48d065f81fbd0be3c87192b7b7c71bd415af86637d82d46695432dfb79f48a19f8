{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"AIPlayer\", {\n    enumerable: true,\n    get: function () {\n      return AIPlayer;\n    }\n  });\n  // Simple AI player for game\n  class AIPlayer {\n    constructor(playerId, element, difficulty = 'medium') {\n      this.playerId = playerId;\n      this.element = element;\n      this.difficulty = difficulty;\n    }\n    findBestLine(horizontalLines, verticalLines, grid) {\n      // Find all empty lines\n      const emptyLines = [];\n\n      // Check horizontal lines\n      for (let y = 0; y < horizontalLines.length; y++) {\n        for (let x = 0; x < horizontalLines[y].length; x++) {\n          if (horizontalLines[y][x].state === 'empty') {\n            emptyLines.push({\n              x,\n              y,\n              isHorizontal: true\n            });\n          }\n        }\n      }\n\n      // Check vertical lines\n      for (let y = 0; y < verticalLines.length; y++) {\n        for (let x = 0; x < verticalLines[y].length; x++) {\n          if (verticalLines[y][x].state === 'empty') {\n            emptyLines.push({\n              x,\n              y,\n              isHorizontal: false\n            });\n          }\n        }\n      }\n\n      // Return random empty line\n      if (emptyLines.length > 0) {\n        return emptyLines[Math.floor(Math.random() * emptyLines.length)];\n      }\n      return null;\n    }\n    findBestArmyMove(grid) {\n      // Find all AI territories with armies > 1\n      const myTerritories = [];\n      for (let y = 0; y < grid.length; y++) {\n        for (let x = 0; x < grid[y].length; x++) {\n          const cell = grid[y][x];\n          if (cell.owner === this.playerId && cell.armyCount > 1) {\n            myTerritories.push(cell);\n          }\n        }\n      }\n\n      // Find valid moves\n      for (const territory of myTerritories) {\n        const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n        for (const [dx, dy] of directions) {\n          const nx = territory.x + dx;\n          const ny = territory.y + dy;\n          if (nx >= 0 && nx < grid[0].length && ny >= 0 && ny < grid.length) {\n            const targetCell = grid[ny][nx];\n            if (!targetCell.owner || targetCell.owner !== this.playerId) {\n              return {\n                from: territory,\n                to: targetCell\n              };\n            }\n          }\n        }\n      }\n      return null;\n    }\n  }\n});","lineCount":88,"map":[[7,2,2,0,"Object"],[7,8,2,0],[7,9,2,0,"defineProperty"],[7,23,2,0],[7,24,2,0,"exports"],[7,31,2,0],[8,4,2,0,"enumerable"],[8,14,2,0],[9,4,2,0,"get"],[9,7,2,0],[9,18,2,0,"get"],[9,19,2,0],[10,6,2,0],[10,13,2,0,"AIPlayer"],[10,21,2,0],[11,4,2,0],[12,2,2,0],[13,2,1,0],[14,2,2,7],[14,8,2,13,"AIPlayer"],[14,16,2,21],[14,17,2,22],[15,4,3,2,"constructor"],[15,15,3,13,"constructor"],[15,16,3,21,"playerId"],[15,24,3,37],[15,26,3,46,"element"],[15,33,3,61],[15,35,3,70,"difficulty"],[15,45,3,88],[15,48,3,91],[15,56,3,99],[15,58,3,101],[16,6,3,101],[16,11,3,21,"playerId"],[16,19,3,37],[16,22,3,21,"playerId"],[16,30,3,37],[17,6,3,37],[17,11,3,46,"element"],[17,18,3,61],[17,21,3,46,"element"],[17,28,3,61],[18,6,3,61],[18,11,3,70,"difficulty"],[18,21,3,88],[18,24,3,70,"difficulty"],[18,34,3,88],[19,4,3,102],[20,4,5,2,"findBestLine"],[20,16,5,14,"findBestLine"],[20,17,5,15,"horizontalLines"],[20,32,5,39],[20,34,5,41,"verticalLines"],[20,47,5,63],[20,49,5,65,"grid"],[20,53,5,78],[20,55,5,80],[21,6,6,4],[22,6,7,4],[22,12,7,10,"emptyLines"],[22,22,7,20],[22,25,7,23],[22,27,7,25],[24,6,9,4],[25,6,10,4],[25,11,10,9],[25,15,10,13,"y"],[25,16,10,14],[25,19,10,17],[25,20,10,18],[25,22,10,20,"y"],[25,23,10,21],[25,26,10,24,"horizontalLines"],[25,41,10,39],[25,42,10,40,"length"],[25,48,10,46],[25,50,10,48,"y"],[25,51,10,49],[25,53,10,51],[25,55,10,53],[26,8,11,6],[26,13,11,11],[26,17,11,15,"x"],[26,18,11,16],[26,21,11,19],[26,22,11,20],[26,24,11,22,"x"],[26,25,11,23],[26,28,11,26,"horizontalLines"],[26,43,11,41],[26,44,11,42,"y"],[26,45,11,43],[26,46,11,44],[26,47,11,45,"length"],[26,53,11,51],[26,55,11,53,"x"],[26,56,11,54],[26,58,11,56],[26,60,11,58],[27,10,12,8],[27,14,12,12,"horizontalLines"],[27,29,12,27],[27,30,12,28,"y"],[27,31,12,29],[27,32,12,30],[27,33,12,31,"x"],[27,34,12,32],[27,35,12,33],[27,36,12,34,"state"],[27,41,12,39],[27,46,12,44],[27,53,12,51],[27,55,12,53],[28,12,13,10,"emptyLines"],[28,22,13,20],[28,23,13,21,"push"],[28,27,13,25],[28,28,13,26],[29,14,13,28,"x"],[29,15,13,29],[30,14,13,31,"y"],[30,15,13,32],[31,14,13,34,"isHorizontal"],[31,26,13,46],[31,28,13,48],[32,12,13,53],[32,13,13,54],[32,14,13,55],[33,10,14,8],[34,8,15,6],[35,6,16,4],[37,6,18,4],[38,6,19,4],[38,11,19,9],[38,15,19,13,"y"],[38,16,19,14],[38,19,19,17],[38,20,19,18],[38,22,19,20,"y"],[38,23,19,21],[38,26,19,24,"verticalLines"],[38,39,19,37],[38,40,19,38,"length"],[38,46,19,44],[38,48,19,46,"y"],[38,49,19,47],[38,51,19,49],[38,53,19,51],[39,8,20,6],[39,13,20,11],[39,17,20,15,"x"],[39,18,20,16],[39,21,20,19],[39,22,20,20],[39,24,20,22,"x"],[39,25,20,23],[39,28,20,26,"verticalLines"],[39,41,20,39],[39,42,20,40,"y"],[39,43,20,41],[39,44,20,42],[39,45,20,43,"length"],[39,51,20,49],[39,53,20,51,"x"],[39,54,20,52],[39,56,20,54],[39,58,20,56],[40,10,21,8],[40,14,21,12,"verticalLines"],[40,27,21,25],[40,28,21,26,"y"],[40,29,21,27],[40,30,21,28],[40,31,21,29,"x"],[40,32,21,30],[40,33,21,31],[40,34,21,32,"state"],[40,39,21,37],[40,44,21,42],[40,51,21,49],[40,53,21,51],[41,12,22,10,"emptyLines"],[41,22,22,20],[41,23,22,21,"push"],[41,27,22,25],[41,28,22,26],[42,14,22,28,"x"],[42,15,22,29],[43,14,22,31,"y"],[43,15,22,32],[44,14,22,34,"isHorizontal"],[44,26,22,46],[44,28,22,48],[45,12,22,54],[45,13,22,55],[45,14,22,56],[46,10,23,8],[47,8,24,6],[48,6,25,4],[50,6,27,4],[51,6,28,4],[51,10,28,8,"emptyLines"],[51,20,28,18],[51,21,28,19,"length"],[51,27,28,25],[51,30,28,28],[51,31,28,29],[51,33,28,31],[52,8,29,6],[52,15,29,13,"emptyLines"],[52,25,29,23],[52,26,29,24,"Math"],[52,30,29,28],[52,31,29,29,"floor"],[52,36,29,34],[52,37,29,35,"Math"],[52,41,29,39],[52,42,29,40,"random"],[52,48,29,46],[52,49,29,47],[52,50,29,48],[52,53,29,51,"emptyLines"],[52,63,29,61],[52,64,29,62,"length"],[52,70,29,68],[52,71,29,69],[52,72,29,70],[53,6,30,4],[54,6,31,4],[54,13,31,11],[54,17,31,15],[55,4,32,2],[56,4,34,2,"findBestArmyMove"],[56,20,34,18,"findBestArmyMove"],[56,21,34,19,"grid"],[56,25,34,32],[56,27,34,34],[57,6,35,4],[58,6,36,4],[58,12,36,10,"myTerritories"],[58,25,36,23],[58,28,36,26],[58,30,36,28],[59,6,38,4],[59,11,38,9],[59,15,38,13,"y"],[59,16,38,14],[59,19,38,17],[59,20,38,18],[59,22,38,20,"y"],[59,23,38,21],[59,26,38,24,"grid"],[59,30,38,28],[59,31,38,29,"length"],[59,37,38,35],[59,39,38,37,"y"],[59,40,38,38],[59,42,38,40],[59,44,38,42],[60,8,39,6],[60,13,39,11],[60,17,39,15,"x"],[60,18,39,16],[60,21,39,19],[60,22,39,20],[60,24,39,22,"x"],[60,25,39,23],[60,28,39,26,"grid"],[60,32,39,30],[60,33,39,31,"y"],[60,34,39,32],[60,35,39,33],[60,36,39,34,"length"],[60,42,39,40],[60,44,39,42,"x"],[60,45,39,43],[60,47,39,45],[60,49,39,47],[61,10,40,8],[61,16,40,14,"cell"],[61,20,40,18],[61,23,40,21,"grid"],[61,27,40,25],[61,28,40,26,"y"],[61,29,40,27],[61,30,40,28],[61,31,40,29,"x"],[61,32,40,30],[61,33,40,31],[62,10,41,8],[62,14,41,12,"cell"],[62,18,41,16],[62,19,41,17,"owner"],[62,24,41,22],[62,29,41,27],[62,33,41,31],[62,34,41,32,"playerId"],[62,42,41,40],[62,46,41,44,"cell"],[62,50,41,48],[62,51,41,49,"armyCount"],[62,60,41,58],[62,63,41,61],[62,64,41,62],[62,66,41,64],[63,12,42,10,"myTerritories"],[63,25,42,23],[63,26,42,24,"push"],[63,30,42,28],[63,31,42,29,"cell"],[63,35,42,33],[63,36,42,34],[64,10,43,8],[65,8,44,6],[66,6,45,4],[68,6,47,4],[69,6,48,4],[69,11,48,9],[69,17,48,15,"territory"],[69,26,48,24],[69,30,48,28,"myTerritories"],[69,43,48,41],[69,45,48,43],[70,8,49,6],[70,14,49,12,"directions"],[70,24,49,22],[70,27,49,25],[70,28,49,26],[70,29,49,27],[70,30,49,28],[70,31,49,29],[70,33,49,31],[70,34,49,32],[70,35,49,33],[70,37,49,35],[70,38,49,36],[70,39,49,37],[70,41,49,39],[70,42,49,40],[70,43,49,41],[70,45,49,43],[70,46,49,44],[70,47,49,45],[70,49,49,47],[70,50,49,48],[70,51,49,49],[70,52,49,50],[70,54,49,52],[70,55,49,53],[70,56,49,54],[70,58,49,56],[70,59,49,57],[70,60,49,58],[70,61,49,59],[71,8,51,6],[71,13,51,11],[71,19,51,17],[71,20,51,18,"dx"],[71,22,51,20],[71,24,51,22,"dy"],[71,26,51,24],[71,27,51,25],[71,31,51,29,"directions"],[71,41,51,39],[71,43,51,41],[72,10,52,8],[72,16,52,14,"nx"],[72,18,52,16],[72,21,52,19,"territory"],[72,30,52,28],[72,31,52,29,"x"],[72,32,52,30],[72,35,52,33,"dx"],[72,37,52,35],[73,10,53,8],[73,16,53,14,"ny"],[73,18,53,16],[73,21,53,19,"territory"],[73,30,53,28],[73,31,53,29,"y"],[73,32,53,30],[73,35,53,33,"dy"],[73,37,53,35],[74,10,55,8],[74,14,55,12,"nx"],[74,16,55,14],[74,20,55,18],[74,21,55,19],[74,25,55,23,"nx"],[74,27,55,25],[74,30,55,28,"grid"],[74,34,55,32],[74,35,55,33],[74,36,55,34],[74,37,55,35],[74,38,55,36,"length"],[74,44,55,42],[74,48,55,46,"ny"],[74,50,55,48],[74,54,55,52],[74,55,55,53],[74,59,55,57,"ny"],[74,61,55,59],[74,64,55,62,"grid"],[74,68,55,66],[74,69,55,67,"length"],[74,75,55,73],[74,77,55,75],[75,12,56,10],[75,18,56,16,"targetCell"],[75,28,56,26],[75,31,56,29,"grid"],[75,35,56,33],[75,36,56,34,"ny"],[75,38,56,36],[75,39,56,37],[75,40,56,38,"nx"],[75,42,56,40],[75,43,56,41],[76,12,57,10],[76,16,57,14],[76,17,57,15,"targetCell"],[76,27,57,25],[76,28,57,26,"owner"],[76,33,57,31],[76,37,57,35,"targetCell"],[76,47,57,45],[76,48,57,46,"owner"],[76,53,57,51],[76,58,57,56],[76,62,57,60],[76,63,57,61,"playerId"],[76,71,57,69],[76,73,57,71],[77,14,58,12],[77,21,58,19],[78,16,58,21,"from"],[78,20,58,25],[78,22,58,27,"territory"],[78,31,58,36],[79,16,58,38,"to"],[79,18,58,40],[79,20,58,42,"targetCell"],[80,14,58,53],[80,15,58,54],[81,12,59,10],[82,10,60,8],[83,8,61,6],[84,6,62,4],[85,6,64,4],[85,13,64,11],[85,17,64,15],[86,4,65,2],[87,2,66,0],[88,0,66,1],[88,3]],"functionMap":{"names":["<global>","AIPlayer","AIPlayer#constructor","AIPlayer#findBestLine","AIPlayer#findBestArmyMove"],"mappings":"AAA;OCC;ECC,qGD;EEE;GF2B;EGE;GH+B"},"hasCjsExports":false},"type":"js/module"}]}