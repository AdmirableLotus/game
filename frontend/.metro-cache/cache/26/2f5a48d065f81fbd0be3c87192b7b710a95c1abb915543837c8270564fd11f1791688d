{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"AIPlayer\", {\n    enumerable: true,\n    get: function () {\n      return AIPlayer;\n    }\n  });\n  class AIPlayer {\n    constructor(playerId, element, difficulty = 'medium') {\n      this.playerId = playerId;\n      this.element = element;\n      this.difficulty = difficulty;\n    }\n\n    // Find best line to draw\n    findBestLine(horizontalLines, verticalLines, grid) {\n      const availableLines = [];\n\n      // Check horizontal lines\n      horizontalLines.forEach((row, y) => {\n        row.forEach((line, x) => {\n          if (line.state === 'empty') {\n            const score = this.evaluateLineMove(x, y, true, grid);\n            availableLines.push({\n              x,\n              y,\n              isHorizontal: true,\n              score\n            });\n          }\n        });\n      });\n\n      // Check vertical lines\n      verticalLines.forEach((row, y) => {\n        row.forEach((line, x) => {\n          if (line.state === 'empty') {\n            const score = this.evaluateLineMove(x, y, false, grid);\n            availableLines.push({\n              x,\n              y,\n              isHorizontal: false,\n              score\n            });\n          }\n        });\n      });\n      if (availableLines.length === 0) return null;\n\n      // Sort by score and add some randomness based on difficulty\n      availableLines.sort((a, b) => b.score - a.score);\n      const randomness = this.difficulty === 'easy' ? 0.7 : this.difficulty === 'medium' ? 0.3 : 0.1;\n      const topMoves = availableLines.slice(0, Math.max(1, Math.floor(availableLines.length * randomness)));\n      return topMoves[Math.floor(Math.random() * topMoves.length)];\n    }\n\n    // Find best army move\n    findBestArmyMove(grid) {\n      const myTerritories = grid.flat().filter(cell => cell.owner === this.playerId && cell.armyCount && cell.armyCount > 1);\n      const possibleMoves = [];\n      myTerritories.forEach(fromCell => {\n        const adjacent = this.getAdjacentCells(fromCell, grid);\n        adjacent.forEach(toCell => {\n          if (toCell.owner !== this.playerId) {\n            const score = this.evaluateArmyMove(fromCell, toCell);\n            possibleMoves.push({\n              from: fromCell,\n              to: toCell,\n              score\n            });\n          }\n        });\n      });\n      if (possibleMoves.length === 0) return null;\n      possibleMoves.sort((a, b) => b.score - a.score);\n      return possibleMoves[0];\n    }\n    evaluateLineMove(x, y, isHorizontal, grid) {\n      let score = 1; // Base score\n\n      // Check if this line completes any squares\n      const squaresToCheck = isHorizontal ? [{\n        sx: x,\n        sy: y - 1\n      }, {\n        sx: x,\n        sy: y\n      }] : [{\n        sx: x - 1,\n        sy: y\n      }, {\n        sx: x,\n        sy: y\n      }];\n      squaresToCheck.forEach(({\n        sx,\n        sy\n      }) => {\n        if (sx >= 0 && sx < grid[0].length && sy >= 0 && sy < grid.length) {\n          if (this.wouldCompleteSquare(sx, sy, x, y, isHorizontal, grid)) {\n            score += 10; // High priority for completing squares\n          }\n        }\n      });\n      return score;\n    }\n    evaluateArmyMove(from, to) {\n      let score = 1;\n      const attackPower = (from.armyCount || 0) - 1;\n      const defensePower = to.armyCount || 1;\n\n      // Prefer winnable battles\n      if (attackPower > defensePower) {\n        score += 5;\n      }\n\n      // Prefer attacking weaker territories\n      score += Math.max(0, 3 - defensePower);\n      return score;\n    }\n    wouldCompleteSquare(sx, sy, lineX, lineY, isHorizontal, grid) {\n      // Simplified check - would need full line state to be accurate\n      return Math.random() < 0.3; // Placeholder logic\n    }\n    getAdjacentCells(cell, grid) {\n      const adjacent = [];\n      const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n\n      // Wind element gets extended range\n      if (this.element === 'wind') {\n        directions.push([-2, 0], [2, 0], [0, -2], [0, 2], [-1, -1], [1, 1], [-1, 1], [1, -1]);\n      }\n      directions.forEach(([dx, dy]) => {\n        const nx = cell.x + dx;\n        const ny = cell.y + dy;\n        if (nx >= 0 && nx < grid[0].length && ny >= 0 && ny < grid.length) {\n          adjacent.push(grid[ny][nx]);\n        }\n      });\n      return adjacent;\n    }\n  }\n});","lineCount":148,"map":[[7,2,3,0,"Object"],[7,8,3,0],[7,9,3,0,"defineProperty"],[7,23,3,0],[7,24,3,0,"exports"],[7,31,3,0],[8,4,3,0,"enumerable"],[8,14,3,0],[9,4,3,0,"get"],[9,7,3,0],[9,18,3,0,"get"],[9,19,3,0],[10,6,3,0],[10,13,3,0,"AIPlayer"],[10,21,3,0],[11,4,3,0],[12,2,3,0],[13,2,3,7],[13,8,3,13,"AIPlayer"],[13,16,3,21],[13,17,3,22],[14,4,8,2,"constructor"],[14,15,8,13,"constructor"],[14,16,8,14,"playerId"],[14,24,8,30],[14,26,8,32,"element"],[14,33,8,47],[14,35,8,49,"difficulty"],[14,45,8,87],[14,48,8,90],[14,56,8,98],[14,58,8,100],[15,6,9,4],[15,10,9,8],[15,11,9,9,"playerId"],[15,19,9,17],[15,22,9,20,"playerId"],[15,30,9,28],[16,6,10,4],[16,10,10,8],[16,11,10,9,"element"],[16,18,10,16],[16,21,10,19,"element"],[16,28,10,26],[17,6,11,4],[17,10,11,8],[17,11,11,9,"difficulty"],[17,21,11,19],[17,24,11,22,"difficulty"],[17,34,11,32],[18,4,12,2],[20,4,14,2],[21,4,15,2,"findBestLine"],[21,16,15,14,"findBestLine"],[21,17,15,15,"horizontalLines"],[21,32,15,40],[21,34,15,42,"verticalLines"],[21,47,15,65],[21,49,15,67,"grid"],[21,53,15,81],[21,55,15,139],[22,6,16,4],[22,12,16,10,"availableLines"],[22,26,16,95],[22,29,16,98],[22,31,16,100],[24,6,18,4],[25,6,19,4,"horizontalLines"],[25,21,19,19],[25,22,19,20,"forEach"],[25,29,19,27],[25,30,19,28],[25,31,19,29,"row"],[25,34,19,32],[25,36,19,34,"y"],[25,37,19,35],[25,42,19,40],[26,8,20,6,"row"],[26,11,20,9],[26,12,20,10,"forEach"],[26,19,20,17],[26,20,20,18],[26,21,20,19,"line"],[26,25,20,23],[26,27,20,25,"x"],[26,28,20,26],[26,33,20,31],[27,10,21,8],[27,14,21,12,"line"],[27,18,21,16],[27,19,21,17,"state"],[27,24,21,22],[27,29,21,27],[27,36,21,34],[27,38,21,36],[28,12,22,10],[28,18,22,16,"score"],[28,23,22,21],[28,26,22,24],[28,30,22,28],[28,31,22,29,"evaluateLineMove"],[28,47,22,45],[28,48,22,46,"x"],[28,49,22,47],[28,51,22,49,"y"],[28,52,22,50],[28,54,22,52],[28,58,22,56],[28,60,22,58,"grid"],[28,64,22,62],[28,65,22,63],[29,12,23,10,"availableLines"],[29,26,23,24],[29,27,23,25,"push"],[29,31,23,29],[29,32,23,30],[30,14,23,32,"x"],[30,15,23,33],[31,14,23,35,"y"],[31,15,23,36],[32,14,23,38,"isHorizontal"],[32,26,23,50],[32,28,23,52],[32,32,23,56],[33,14,23,58,"score"],[34,12,23,64],[34,13,23,65],[34,14,23,66],[35,10,24,8],[36,8,25,6],[36,9,25,7],[36,10,25,8],[37,6,26,4],[37,7,26,5],[37,8,26,6],[39,6,28,4],[40,6,29,4,"verticalLines"],[40,19,29,17],[40,20,29,18,"forEach"],[40,27,29,25],[40,28,29,26],[40,29,29,27,"row"],[40,32,29,30],[40,34,29,32,"y"],[40,35,29,33],[40,40,29,38],[41,8,30,6,"row"],[41,11,30,9],[41,12,30,10,"forEach"],[41,19,30,17],[41,20,30,18],[41,21,30,19,"line"],[41,25,30,23],[41,27,30,25,"x"],[41,28,30,26],[41,33,30,31],[42,10,31,8],[42,14,31,12,"line"],[42,18,31,16],[42,19,31,17,"state"],[42,24,31,22],[42,29,31,27],[42,36,31,34],[42,38,31,36],[43,12,32,10],[43,18,32,16,"score"],[43,23,32,21],[43,26,32,24],[43,30,32,28],[43,31,32,29,"evaluateLineMove"],[43,47,32,45],[43,48,32,46,"x"],[43,49,32,47],[43,51,32,49,"y"],[43,52,32,50],[43,54,32,52],[43,59,32,57],[43,61,32,59,"grid"],[43,65,32,63],[43,66,32,64],[44,12,33,10,"availableLines"],[44,26,33,24],[44,27,33,25,"push"],[44,31,33,29],[44,32,33,30],[45,14,33,32,"x"],[45,15,33,33],[46,14,33,35,"y"],[46,15,33,36],[47,14,33,38,"isHorizontal"],[47,26,33,50],[47,28,33,52],[47,33,33,57],[48,14,33,59,"score"],[49,12,33,65],[49,13,33,66],[49,14,33,67],[50,10,34,8],[51,8,35,6],[51,9,35,7],[51,10,35,8],[52,6,36,4],[52,7,36,5],[52,8,36,6],[53,6,38,4],[53,10,38,8,"availableLines"],[53,24,38,22],[53,25,38,23,"length"],[53,31,38,29],[53,36,38,34],[53,37,38,35],[53,39,38,37],[53,46,38,44],[53,50,38,48],[55,6,40,4],[56,6,41,4,"availableLines"],[56,20,41,18],[56,21,41,19,"sort"],[56,25,41,23],[56,26,41,24],[56,27,41,25,"a"],[56,28,41,26],[56,30,41,28,"b"],[56,31,41,29],[56,36,41,34,"b"],[56,37,41,35],[56,38,41,36,"score"],[56,43,41,41],[56,46,41,44,"a"],[56,47,41,45],[56,48,41,46,"score"],[56,53,41,51],[56,54,41,52],[57,6,43,4],[57,12,43,10,"randomness"],[57,22,43,20],[57,25,43,23],[57,29,43,27],[57,30,43,28,"difficulty"],[57,40,43,38],[57,45,43,43],[57,51,43,49],[57,54,43,52],[57,57,43,55],[57,60,43,58],[57,64,43,62],[57,65,43,63,"difficulty"],[57,75,43,73],[57,80,43,78],[57,88,43,86],[57,91,43,89],[57,94,43,92],[57,97,43,95],[57,100,43,98],[58,6,44,4],[58,12,44,10,"topMoves"],[58,20,44,18],[58,23,44,21,"availableLines"],[58,37,44,35],[58,38,44,36,"slice"],[58,43,44,41],[58,44,44,42],[58,45,44,43],[58,47,44,45,"Math"],[58,51,44,49],[58,52,44,50,"max"],[58,55,44,53],[58,56,44,54],[58,57,44,55],[58,59,44,57,"Math"],[58,63,44,61],[58,64,44,62,"floor"],[58,69,44,67],[58,70,44,68,"availableLines"],[58,84,44,82],[58,85,44,83,"length"],[58,91,44,89],[58,94,44,92,"randomness"],[58,104,44,102],[58,105,44,103],[58,106,44,104],[58,107,44,105],[59,6,46,4],[59,13,46,11,"topMoves"],[59,21,46,19],[59,22,46,20,"Math"],[59,26,46,24],[59,27,46,25,"floor"],[59,32,46,30],[59,33,46,31,"Math"],[59,37,46,35],[59,38,46,36,"random"],[59,44,46,42],[59,45,46,43],[59,46,46,44],[59,49,46,47,"topMoves"],[59,57,46,55],[59,58,46,56,"length"],[59,64,46,62],[59,65,46,63],[59,66,46,64],[60,4,47,2],[62,4,49,2],[63,4,50,2,"findBestArmyMove"],[63,20,50,18,"findBestArmyMove"],[63,21,50,19,"grid"],[63,25,50,33],[63,27,50,68],[64,6,51,4],[64,12,51,10,"myTerritories"],[64,25,51,23],[64,28,51,26,"grid"],[64,32,51,30],[64,33,51,31,"flat"],[64,37,51,35],[64,38,51,36],[64,39,51,37],[64,40,51,38,"filter"],[64,46,51,44],[64,47,51,45,"cell"],[64,51,51,49],[64,55,52,6,"cell"],[64,59,52,10],[64,60,52,11,"owner"],[64,65,52,16],[64,70,52,21],[64,74,52,25],[64,75,52,26,"playerId"],[64,83,52,34],[64,87,52,38,"cell"],[64,91,52,42],[64,92,52,43,"armyCount"],[64,101,52,52],[64,105,52,56,"cell"],[64,109,52,60],[64,110,52,61,"armyCount"],[64,119,52,70],[64,122,52,73],[64,123,53,4],[64,124,53,5],[65,6,55,4],[65,12,55,10,"possibleMoves"],[65,25,55,71],[65,28,55,74],[65,30,55,76],[66,6,57,4,"myTerritories"],[66,19,57,17],[66,20,57,18,"forEach"],[66,27,57,25],[66,28,57,26,"fromCell"],[66,36,57,34],[66,40,57,38],[67,8,58,6],[67,14,58,12,"adjacent"],[67,22,58,20],[67,25,58,23],[67,29,58,27],[67,30,58,28,"getAdjacentCells"],[67,46,58,44],[67,47,58,45,"fromCell"],[67,55,58,53],[67,57,58,55,"grid"],[67,61,58,59],[67,62,58,60],[68,8,60,6,"adjacent"],[68,16,60,14],[68,17,60,15,"forEach"],[68,24,60,22],[68,25,60,23,"toCell"],[68,31,60,29],[68,35,60,33],[69,10,61,8],[69,14,61,12,"toCell"],[69,20,61,18],[69,21,61,19,"owner"],[69,26,61,24],[69,31,61,29],[69,35,61,33],[69,36,61,34,"playerId"],[69,44,61,42],[69,46,61,44],[70,12,62,10],[70,18,62,16,"score"],[70,23,62,21],[70,26,62,24],[70,30,62,28],[70,31,62,29,"evaluateArmyMove"],[70,47,62,45],[70,48,62,46,"fromCell"],[70,56,62,54],[70,58,62,56,"toCell"],[70,64,62,62],[70,65,62,63],[71,12,63,10,"possibleMoves"],[71,25,63,23],[71,26,63,24,"push"],[71,30,63,28],[71,31,63,29],[72,14,63,31,"from"],[72,18,63,35],[72,20,63,37,"fromCell"],[72,28,63,45],[73,14,63,47,"to"],[73,16,63,49],[73,18,63,51,"toCell"],[73,24,63,57],[74,14,63,59,"score"],[75,12,63,65],[75,13,63,66],[75,14,63,67],[76,10,64,8],[77,8,65,6],[77,9,65,7],[77,10,65,8],[78,6,66,4],[78,7,66,5],[78,8,66,6],[79,6,68,4],[79,10,68,8,"possibleMoves"],[79,23,68,21],[79,24,68,22,"length"],[79,30,68,28],[79,35,68,33],[79,36,68,34],[79,38,68,36],[79,45,68,43],[79,49,68,47],[80,6,70,4,"possibleMoves"],[80,19,70,17],[80,20,70,18,"sort"],[80,24,70,22],[80,25,70,23],[80,26,70,24,"a"],[80,27,70,25],[80,29,70,27,"b"],[80,30,70,28],[80,35,70,33,"b"],[80,36,70,34],[80,37,70,35,"score"],[80,42,70,40],[80,45,70,43,"a"],[80,46,70,44],[80,47,70,45,"score"],[80,52,70,50],[80,53,70,51],[81,6,71,4],[81,13,71,11,"possibleMoves"],[81,26,71,24],[81,27,71,25],[81,28,71,26],[81,29,71,27],[82,4,72,2],[83,4,74,10,"evaluateLineMove"],[83,20,74,26,"evaluateLineMove"],[83,21,74,27,"x"],[83,22,74,36],[83,24,74,38,"y"],[83,25,74,47],[83,27,74,49,"isHorizontal"],[83,39,74,70],[83,41,74,72,"grid"],[83,45,74,86],[83,47,74,96],[84,6,75,4],[84,10,75,8,"score"],[84,15,75,13],[84,18,75,16],[84,19,75,17],[84,20,75,18],[84,21,75,19],[86,6,77,4],[87,6,78,4],[87,12,78,10,"squaresToCheck"],[87,26,78,24],[87,29,78,27,"isHorizontal"],[87,41,78,39],[87,44,79,8],[87,45,79,9],[88,8,79,11,"sx"],[88,10,79,13],[88,12,79,15,"x"],[88,13,79,16],[89,8,79,18,"sy"],[89,10,79,20],[89,12,79,22,"y"],[89,13,79,23],[89,16,79,26],[90,6,79,28],[90,7,79,29],[90,9,79,31],[91,8,79,33,"sx"],[91,10,79,35],[91,12,79,37,"x"],[91,13,79,38],[92,8,79,40,"sy"],[92,10,79,42],[92,12,79,44,"y"],[93,6,79,46],[93,7,79,47],[93,8,79,48],[93,11,80,8],[93,12,80,9],[94,8,80,11,"sx"],[94,10,80,13],[94,12,80,15,"x"],[94,13,80,16],[94,16,80,19],[94,17,80,20],[95,8,80,22,"sy"],[95,10,80,24],[95,12,80,26,"y"],[96,6,80,28],[96,7,80,29],[96,9,80,31],[97,8,80,33,"sx"],[97,10,80,35],[97,12,80,37,"x"],[97,13,80,38],[98,8,80,40,"sy"],[98,10,80,42],[98,12,80,44,"y"],[99,6,80,46],[99,7,80,47],[99,8,80,48],[100,6,82,4,"squaresToCheck"],[100,20,82,18],[100,21,82,19,"forEach"],[100,28,82,26],[100,29,82,27],[100,30,82,28],[101,8,82,30,"sx"],[101,10,82,32],[102,8,82,34,"sy"],[103,6,82,37],[103,7,82,38],[103,12,82,43],[104,8,83,6],[104,12,83,10,"sx"],[104,14,83,12],[104,18,83,16],[104,19,83,17],[104,23,83,21,"sx"],[104,25,83,23],[104,28,83,26,"grid"],[104,32,83,30],[104,33,83,31],[104,34,83,32],[104,35,83,33],[104,36,83,34,"length"],[104,42,83,40],[104,46,83,44,"sy"],[104,48,83,46],[104,52,83,50],[104,53,83,51],[104,57,83,55,"sy"],[104,59,83,57],[104,62,83,60,"grid"],[104,66,83,64],[104,67,83,65,"length"],[104,73,83,71],[104,75,83,73],[105,10,84,8],[105,14,84,12],[105,18,84,16],[105,19,84,17,"wouldCompleteSquare"],[105,38,84,36],[105,39,84,37,"sx"],[105,41,84,39],[105,43,84,41,"sy"],[105,45,84,43],[105,47,84,45,"x"],[105,48,84,46],[105,50,84,48,"y"],[105,51,84,49],[105,53,84,51,"isHorizontal"],[105,65,84,63],[105,67,84,65,"grid"],[105,71,84,69],[105,72,84,70],[105,74,84,72],[106,12,85,10,"score"],[106,17,85,15],[106,21,85,19],[106,23,85,21],[106,24,85,22],[106,25,85,23],[107,10,86,8],[108,8,87,6],[109,6,88,4],[109,7,88,5],[109,8,88,6],[110,6,90,4],[110,13,90,11,"score"],[110,18,90,16],[111,4,91,2],[112,4,93,10,"evaluateArmyMove"],[112,20,93,26,"evaluateArmyMove"],[112,21,93,27,"from"],[112,25,93,37],[112,27,93,39,"to"],[112,29,93,47],[112,31,93,57],[113,6,94,4],[113,10,94,8,"score"],[113,15,94,13],[113,18,94,16],[113,19,94,17],[114,6,96,4],[114,12,96,10,"attackPower"],[114,23,96,21],[114,26,96,24],[114,27,96,25,"from"],[114,31,96,29],[114,32,96,30,"armyCount"],[114,41,96,39],[114,45,96,43],[114,46,96,44],[114,50,96,48],[114,51,96,49],[115,6,97,4],[115,12,97,10,"defensePower"],[115,24,97,22],[115,27,97,25,"to"],[115,29,97,27],[115,30,97,28,"armyCount"],[115,39,97,37],[115,43,97,41],[115,44,97,42],[117,6,99,4],[118,6,100,4],[118,10,100,8,"attackPower"],[118,21,100,19],[118,24,100,22,"defensePower"],[118,36,100,34],[118,38,100,36],[119,8,101,6,"score"],[119,13,101,11],[119,17,101,15],[119,18,101,16],[120,6,102,4],[122,6,104,4],[123,6,105,4,"score"],[123,11,105,9],[123,15,105,13,"Math"],[123,19,105,17],[123,20,105,18,"max"],[123,23,105,21],[123,24,105,22],[123,25,105,23],[123,27,105,25],[123,28,105,26],[123,31,105,29,"defensePower"],[123,43,105,41],[123,44,105,42],[124,6,107,4],[124,13,107,11,"score"],[124,18,107,16],[125,4,108,2],[126,4,110,10,"wouldCompleteSquare"],[126,23,110,29,"wouldCompleteSquare"],[126,24,110,30,"sx"],[126,26,110,40],[126,28,110,42,"sy"],[126,30,110,52],[126,32,110,54,"lineX"],[126,37,110,67],[126,39,110,69,"lineY"],[126,44,110,82],[126,46,110,84,"isHorizontal"],[126,58,110,105],[126,60,110,107,"grid"],[126,64,110,121],[126,66,110,132],[127,6,111,4],[128,6,112,4],[128,13,112,11,"Math"],[128,17,112,15],[128,18,112,16,"random"],[128,24,112,22],[128,25,112,23],[128,26,112,24],[128,29,112,27],[128,32,112,30],[128,33,112,31],[128,34,112,32],[129,4,113,2],[130,4,115,10,"getAdjacentCells"],[130,20,115,26,"getAdjacentCells"],[130,21,115,27,"cell"],[130,25,115,37],[130,27,115,39,"grid"],[130,31,115,53],[130,33,115,63],[131,6,116,4],[131,12,116,10,"adjacent"],[131,20,116,26],[131,23,116,29],[131,25,116,31],[132,6,117,4],[132,12,117,10,"directions"],[132,22,117,20],[132,25,117,23],[132,26,117,24],[132,27,117,25],[132,28,117,26],[132,29,117,27],[132,31,117,29],[132,32,117,30],[132,33,117,31],[132,35,117,33],[132,36,117,34],[132,37,117,35],[132,39,117,37],[132,40,117,38],[132,41,117,39],[132,43,117,41],[132,44,117,42],[132,45,117,43],[132,47,117,45],[132,48,117,46],[132,49,117,47],[132,50,117,48],[132,52,117,50],[132,53,117,51],[132,54,117,52],[132,56,117,54],[132,57,117,55],[132,58,117,56],[132,59,117,57],[134,6,119,4],[135,6,120,4],[135,10,120,8],[135,14,120,12],[135,15,120,13,"element"],[135,22,120,20],[135,27,120,25],[135,33,120,31],[135,35,120,33],[136,8,121,6,"directions"],[136,18,121,16],[136,19,121,17,"push"],[136,23,121,21],[136,24,121,22],[136,25,121,23],[136,26,121,24],[136,27,121,25],[136,29,121,27],[136,30,121,28],[136,31,121,29],[136,33,121,31],[136,34,121,32],[136,35,121,33],[136,37,121,35],[136,38,121,36],[136,39,121,37],[136,41,121,39],[136,42,121,40],[136,43,121,41],[136,45,121,43],[136,46,121,44],[136,47,121,45],[136,48,121,46],[136,50,121,48],[136,51,121,49],[136,52,121,50],[136,54,121,52],[136,55,121,53],[136,56,121,54],[136,58,121,56],[136,59,121,57],[136,60,121,58],[136,61,121,59],[136,63,121,61],[136,64,121,62],[136,65,121,63],[136,66,121,64],[136,68,121,66],[136,69,121,67],[136,70,121,68],[136,72,121,70],[136,73,121,71],[136,74,121,72],[136,76,121,74],[136,77,121,75],[136,78,121,76],[136,79,121,77],[136,81,121,79],[136,82,121,80],[136,83,121,81],[136,85,121,83],[136,86,121,84],[136,87,121,85],[136,89,121,87],[136,90,121,88],[136,91,121,89],[136,92,121,90],[136,93,121,91],[137,6,122,4],[138,6,124,4,"directions"],[138,16,124,14],[138,17,124,15,"forEach"],[138,24,124,22],[138,25,124,23],[138,26,124,24],[138,27,124,25,"dx"],[138,29,124,27],[138,31,124,29,"dy"],[138,33,124,31],[138,34,124,32],[138,39,124,37],[139,8,125,6],[139,14,125,12,"nx"],[139,16,125,14],[139,19,125,17,"cell"],[139,23,125,21],[139,24,125,22,"x"],[139,25,125,23],[139,28,125,26,"dx"],[139,30,125,28],[140,8,126,6],[140,14,126,12,"ny"],[140,16,126,14],[140,19,126,17,"cell"],[140,23,126,21],[140,24,126,22,"y"],[140,25,126,23],[140,28,126,26,"dy"],[140,30,126,28],[141,8,128,6],[141,12,128,10,"nx"],[141,14,128,12],[141,18,128,16],[141,19,128,17],[141,23,128,21,"nx"],[141,25,128,23],[141,28,128,26,"grid"],[141,32,128,30],[141,33,128,31],[141,34,128,32],[141,35,128,33],[141,36,128,34,"length"],[141,42,128,40],[141,46,128,44,"ny"],[141,48,128,46],[141,52,128,50],[141,53,128,51],[141,57,128,55,"ny"],[141,59,128,57],[141,62,128,60,"grid"],[141,66,128,64],[141,67,128,65,"length"],[141,73,128,71],[141,75,128,73],[142,10,129,8,"adjacent"],[142,18,129,16],[142,19,129,17,"push"],[142,23,129,21],[142,24,129,22,"grid"],[142,28,129,26],[142,29,129,27,"ny"],[142,31,129,29],[142,32,129,30],[142,33,129,31,"nx"],[142,35,129,33],[142,36,129,34],[142,37,129,35],[143,8,130,6],[144,6,131,4],[144,7,131,5],[144,8,131,6],[145,6,133,4],[145,13,133,11,"adjacent"],[145,21,133,19],[146,4,134,2],[147,2,135,0],[148,0,135,1],[148,3]],"functionMap":{"names":["<global>","AIPlayer","AIPlayer#constructor","AIPlayer#findBestLine","horizontalLines.forEach$argument_0","row.forEach$argument_0","verticalLines.forEach$argument_0","availableLines.sort$argument_0","AIPlayer#findBestArmyMove","grid.flat.filter$argument_0","myTerritories.forEach$argument_0","adjacent.forEach$argument_0","possibleMoves.sort$argument_0","AIPlayer#evaluateLineMove","squaresToCheck.forEach$argument_0","AIPlayer#evaluateArmyMove","AIPlayer#wouldCompleteSquare","AIPlayer#getAdjacentCells","directions.forEach$argument_0"],"mappings":"AAA;OCE;ECK;GDI;EEG;4BCI;kBCC;ODK;KDC;0BGG;kBDC;OCK;KHC;wBIK,2BJ;GFM;EOG;6CCC;0EDC;0BEK;uBCG;ODK;KFC;uBII,2BJ;GPE;EYE;2BCQ;KDM;GZG;EcE;Gde;EeE;GfG;EgBE;uBCS;KDO;GhBG"},"hasCjsExports":false},"type":"js/module"}]}